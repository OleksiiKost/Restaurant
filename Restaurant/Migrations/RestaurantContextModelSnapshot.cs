// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant;

#nullable disable

namespace Restaurant.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    partial class RestaurantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Restaurant.Ingredient", b =>
                {
                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<string>("NameIngredient")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdIngredient")
                        .HasName("PK_Restaurant_IdIngredient");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Restaurant.ListOfDishesToOrder", b =>
                {
                    b.Property<int>("IdDish")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<string>("NameDish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdDish", "IdOrder")
                        .HasName("PK_Restaurant_IdDish_IdOrder");

                    b.ToTable("ListOfDishesToOrder", (string)null);
                });

            modelBuilder.Entity("Restaurant.ListOfOrderToProvider", b =>
                {
                    b.Property<int>("IdOrderToProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdOrderToProvider", "IdIngredient")
                        .HasName("PK_Restaurant_IdOrderToProvider_IdIngredient");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("ListOfOrderToProvider", (string)null);
                });

            modelBuilder.Entity("Restaurant.ListOfProviderInvoice", b =>
                {
                    b.Property<int>("IdInvoice")
                        .HasColumnType("int");

                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdInvoice", "IdIngredient")
                        .HasName("PK_Restaurant_IdInvoice_IdIngredient");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("ListOfProviderInvoice", (string)null);
                });

            modelBuilder.Entity("Restaurant.Menu", b =>
                {
                    b.Property<int>("IdDish")
                        .HasColumnType("int");

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<string>("NameDish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("IdDish")
                        .HasName("PK_Restaurant_IdDish");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Restaurant.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Restaurant.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPersonal")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfTable")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("IdOrder")
                        .HasName("PK_Restaurant_IdOrderh");

                    b.HasIndex("IdPersonal");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Restaurant.OrderToProvider", b =>
                {
                    b.Property<int>("IdOrderToProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumberProvider")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumberRestaurant")
                        .HasColumnType("int");

                    b.HasKey("IdOrderToProvider")
                        .HasName("PK_Restaurant_IdOrderToProvider");

                    b.HasIndex("IdProvider");

                    b.ToTable("OrderToProvider", (string)null);
                });

            modelBuilder.Entity("Restaurant.Personal", b =>
                {
                    b.Property<int>("IdPersonal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Shift")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdPersonal")
                        .HasName("PK_Restaurant_IdPersonal");

                    b.HasIndex(new[] { "PhoneNumber" }, "Restaurant_Personal_PhoneNumber_Unique")
                        .IsUnique();

                    b.ToTable("Personal", (string)null);
                });

            modelBuilder.Entity("Restaurant.Provider", b =>
                {
                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.Property<string>("AdressProvider")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("EMail")
                        .IsFixedLength();

                    b.Property<int>("PhoneNumberProvider")
                        .HasColumnType("int");

                    b.HasKey("IdProvider")
                        .HasName("PK_Restaurant_IdProvider");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("Restaurant.ProviderInvoice", b =>
                {
                    b.Property<int>("IdInvoice")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDelivery")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfIssueInvoice")
                        .HasColumnType("datetime");

                    b.Property<int>("IdOrderToProvider")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.HasKey("IdInvoice")
                        .HasName("PK_Restaurant_IdInvoice");

                    b.HasIndex("IdOrderToProvider");

                    b.HasIndex("IdProvider");

                    b.ToTable("ProviderInvoice", (string)null);
                });

            modelBuilder.Entity("Restaurant.Recipe", b =>
                {
                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<int>("IdDish")
                        .HasColumnType("int");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<string>("MethodOfCooking")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdIngredient", "IdDish")
                        .HasName("PK_Restaurant_IdIngredient_IdDish");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Restaurant.Restaurant", b =>
                {
                    b.Property<int>("IdRestaurant")
                        .HasColumnType("int");

                    b.Property<string>("AdressRestaurant")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("EMail")
                        .IsFixedLength();

                    b.Property<string>("FullNameOwner")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("NameRestaurant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PhoneNumberRestaurant")
                        .HasColumnType("int");

                    b.HasKey("IdRestaurant")
                        .HasName("PK_Restaurant_IdRestaurant");

                    b.ToTable("RESTAURANT", (string)null);
                });

            modelBuilder.Entity("Restaurant.Storage", b =>
                {
                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<int>("IdRestaurant")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("datetime");

                    b.Property<int>("IdInvoice")
                        .HasColumnType("int");

                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdIngredient", "IdRestaurant", "DateOfManufacture")
                        .HasName("PK_Restaurant_IdIngredient_IdRestaurant_DateOfManufacture");

                    b.HasIndex("IdInvoice");

                    b.HasIndex("IdUnitOfMent");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("Restaurant.UnitOfMeasurement", b =>
                {
                    b.Property<int>("IdUnitOfMent")
                        .HasColumnType("int");

                    b.Property<string>("NameUnit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdUnitOfMent")
                        .HasName("PK_Restaurant_IdUnitOfMent");

                    b.ToTable("UnitOfMeasurement", (string)null);
                });

            modelBuilder.Entity("Restaurant.Ingredient", b =>
                {
                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("Ingredients")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Ingredients_IdUnitOfMent");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.ListOfOrderToProvider", b =>
                {
                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("ListOfOrderToProviders")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_ListOfOrderToProvider_IdUnitOfMent");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.ListOfProviderInvoice", b =>
                {
                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("ListOfProviderInvoices")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_ListOfProviderInvoice_IdUnitOfMent");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.Menu", b =>
                {
                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("Menus")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Menu_IdUnitOfMent");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.Order", b =>
                {
                    b.HasOne("Restaurant.Personal", "IdPersonalNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdPersonal")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_IdPersonal");

                    b.Navigation("IdPersonalNavigation");
                });

            modelBuilder.Entity("Restaurant.OrderToProvider", b =>
                {
                    b.HasOne("Restaurant.Provider", "IdProviderNavigation")
                        .WithMany("OrderToProviders")
                        .HasForeignKey("IdProvider")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_OrderToProvider_IdProvider");

                    b.Navigation("IdProviderNavigation");
                });

            modelBuilder.Entity("Restaurant.ProviderInvoice", b =>
                {
                    b.HasOne("Restaurant.OrderToProvider", "IdOrderToProviderNavigation")
                        .WithMany("ProviderInvoices")
                        .HasForeignKey("IdOrderToProvider")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_ProviderInvoice_IdOrderToProvider");

                    b.HasOne("Restaurant.Provider", "IdProviderNavigation")
                        .WithMany("ProviderInvoices")
                        .HasForeignKey("IdProvider")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_ProviderInvoice_IdProvider");

                    b.Navigation("IdOrderToProviderNavigation");

                    b.Navigation("IdProviderNavigation");
                });

            modelBuilder.Entity("Restaurant.Recipe", b =>
                {
                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Recipes_IdUnitOfMent");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.Storage", b =>
                {
                    b.HasOne("Restaurant.ProviderInvoice", "IdInvoiceNavigation")
                        .WithMany("Storages")
                        .HasForeignKey("IdInvoice")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Storage_IdInvoice");

                    b.HasOne("Restaurant.UnitOfMeasurement", "IdUnitOfMentNavigation")
                        .WithMany("Storages")
                        .HasForeignKey("IdUnitOfMent")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Storage_IdUnitOfMent");

                    b.Navigation("IdInvoiceNavigation");

                    b.Navigation("IdUnitOfMentNavigation");
                });

            modelBuilder.Entity("Restaurant.OrderToProvider", b =>
                {
                    b.Navigation("ProviderInvoices");
                });

            modelBuilder.Entity("Restaurant.Personal", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Restaurant.Provider", b =>
                {
                    b.Navigation("OrderToProviders");

                    b.Navigation("ProviderInvoices");
                });

            modelBuilder.Entity("Restaurant.ProviderInvoice", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("Restaurant.UnitOfMeasurement", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ListOfOrderToProviders");

                    b.Navigation("ListOfProviderInvoices");

                    b.Navigation("Menus");

                    b.Navigation("Recipes");

                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
